{"version":3,"sources":["components/Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionType","init","numItemsPerGroup","currentPlayer","selectedGroup","itemsRemovedPerGroup","map","numItems","Array","fill","reducer","state","action","type","remove","toRemove","payload","currentGroup","group","item","passTurn","restart","groupColors","playerColors","Game","React","dispatch","gameOver","flat","reduce","count","isRemoved","Number","style","color","fontWeight","GameContainer","items","Group","key","Item","disabled","removed","canRemove","onClick","Button","primary","styled","button","props","background","borderColor","div","darken","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7b67934b.chunk.js","sourcesContent":["import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { darken } from \"polished\";\n\ninterface Props {\n  numItemsPerGroup: number[];\n}\n\ninterface State {\n  currentPlayer: number;\n  selectedGroup: number | null;\n  itemsRemovedPerGroup: boolean[][];\n}\n\nenum ActionType {\n  remove,\n  passTurn,\n  restart,\n}\n\ninterface RemoveAction {\n  type: ActionType.remove;\n  payload: {\n    group: number;\n    item: number;\n  };\n}\n\ninterface PassTurnAction {\n  type: ActionType.passTurn;\n}\n\ninterface RestartAction {\n  type: ActionType.restart;\n  payload: {\n    numItemsPerGroup: number[];\n  };\n}\n\ntype Action = RemoveAction | PassTurnAction | RestartAction;\n\nfunction checkGameOver(items: boolean[][]): boolean {\n  let numNotRemoved = items\n    .flat()\n    .reduce((count, isRemoved) => count + Number(!isRemoved), 0);\n  return numNotRemoved <= 1;\n}\n\nfunction init(numItemsPerGroup: number[]): State {\n  return {\n    currentPlayer: 0,\n    selectedGroup: null,\n    itemsRemovedPerGroup: numItemsPerGroup.map((numItems) =>\n      Array<boolean>(numItems).fill(false)\n    ),\n  };\n}\n\nfunction reducer(state: State, action: Action): State {\n  if (action.type === ActionType.remove) {\n    let toRemove = action.payload;\n    let currentGroup = state.selectedGroup ?? toRemove.group;\n    if (toRemove.group !== currentGroup) {\n      return state;\n    }\n    let itemsRemovedPerGroup = [...state.itemsRemovedPerGroup];\n    itemsRemovedPerGroup[toRemove.group][toRemove.item] = true;\n    return {\n      ...state,\n      selectedGroup: currentGroup,\n      itemsRemovedPerGroup,\n    };\n  }\n  if (action.type === ActionType.passTurn) {\n    return {\n      ...state,\n      currentPlayer: 1 - state.currentPlayer,\n      selectedGroup: null,\n    };\n  }\n  if (action.type === ActionType.restart) {\n    return init(action.payload.numItemsPerGroup);\n  }\n  return state;\n}\n\nconst groupColors = [\"#66c2a5\", \"#fc8d62\", \"#8da0cb\"];\nconst playerColors = [\"DarkSlateBlue\", \"DarkRed\"];\n\nexport default function Game({ numItemsPerGroup }: Props) {\n  const [state, dispatch] = React.useReducer(reducer, numItemsPerGroup, init);\n\n  let gameOver = checkGameOver(state.itemsRemovedPerGroup);\n  return (\n    <>\n      <div>\n        <h2\n          style={{\n            color: gameOver\n              ? playerColors[1 - state.currentPlayer]\n              : playerColors[state.currentPlayer],\n            fontWeight: \"bold\",\n          }}\n        >\n          {gameOver\n            ? `Juego terminado! Jugador ${2 - state.currentPlayer} gana!`\n            : `Turno del jugador ${state.currentPlayer + 1}`}\n        </h2>\n      </div>\n      <GameContainer>\n        {state.itemsRemovedPerGroup.map((items, group) => (\n          <Group key={`group-${group}`}>\n            {items.map((isRemoved, item) => (\n              <Item\n                color={groupColors[group]}\n                key={`item-${item}`}\n                disabled={gameOver || isRemoved}\n                removed={isRemoved}\n                canRemove={\n                  !gameOver &&\n                  (state.selectedGroup !== null\n                    ? group === state.selectedGroup\n                    : true)\n                }\n                onClick={() =>\n                  dispatch({\n                    type: ActionType.remove,\n                    payload: { group, item },\n                  })\n                }\n              />\n            ))}\n          </Group>\n        ))}\n      </GameContainer>\n      <div>\n        <Button\n          disabled={gameOver || state.selectedGroup === null}\n          onClick={() => dispatch({ type: ActionType.passTurn })}\n          primary\n        >\n          Terminar turno\n        </Button>\n        <Button\n          onClick={() =>\n            dispatch({\n              type: ActionType.restart,\n              payload: { numItemsPerGroup },\n            })\n          }\n          primary={gameOver}\n        >\n          Reiniciar\n        </Button>\n      </div>\n    </>\n  );\n}\n\ninterface ButtonProps {\n  disabled?: boolean;\n  primary: boolean;\n}\nconst Button = styled.button`\n  ${(props: ButtonProps) =>\n    !props.disabled && {\n      background: props.primary ? \"palevioletred\" : \"white\",\n      color: props.primary ? \"white\" : \"palevioletred\",\n      borderColor: \"palevioletred\",\n    }}\n  cursor: ${(props: ButtonProps) =>\n    props.disabled ? \"not-allowed\" : \"pointer\"};\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border-width: 2px;\n  border-style: solid;\n  border-radius: 3px;\n`;\n\nconst GameContainer = styled.div`\n  display: flex;\n  min-height: 300px;\n  align-self: stretch;\n  flex-flow: row wrap;\n  justify-content: center;\n  margin: 2em;\n`;\n\nconst Group = styled.div`\n  display: flex;\n  max-height: 10em;\n  padding: 5em 2em;\n  justify-content: center;\n  align-items: stretch;\n  flex-flow: row wrap;\n\n  & + & {\n    border-left: 2px solid palevioletred;\n  }\n`;\n\ninterface ItemProps {\n  color: string;\n  removed: boolean;\n  canRemove: boolean;\n}\nconst Item = styled.button`\n  height: 5em;\n  width: 5em;\n  background-color: ${({ removed, color }: ItemProps) =>\n    removed ? \"white\" : color};\n  border: 3px dotted\n    ${({ removed, color }: ItemProps) =>\n      removed ? \"white\" : darken(0.4, color)};\n  cursor: ${({ removed, canRemove }: ItemProps) =>\n    removed ? \"auto\" : canRemove ? \"pointer\" : \"not-allowed\"};\n\n  &:nth-child(odd) {\n    align-self: flex-end;\n  }\n\n  &:nth-child(even) {\n    align-self: flex-start;\n  }\n`;\n","import * as React from \"react\";\n\nimport Game from \"./components/Game\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Game numItemsPerGroup={[3, 5, 7]} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}